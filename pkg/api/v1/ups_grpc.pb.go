// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpsServiceClient is the client API for UpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpsServiceClient interface {
	// StartLocalInverter starts a Inverter on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ups/config.yaml
	//   3. all bytes constituting the Inverter YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalInverter(ctx context.Context, opts ...grpc.CallOption) (UpsService_StartLocalInverterClient, error)
	// StartFromPreviousInverter starts a new Inverter based on a previous one.
	// If the previous Inverter does not have the can-replay condition set this call will result in an error.
	StartFromPreviousInverter(ctx context.Context, in *StartFromPreviousInverterRequest, opts ...grpc.CallOption) (*StartInverterResponse, error)
	// StartInverterRequest starts a new Inverter based on its specification.
	StartInverter(ctx context.Context, in *StartInverterRequest, opts ...grpc.CallOption) (*StartInverterResponse, error)
	// Searches for Inverter(s) known to this instance
	ListInverters(ctx context.Context, in *ListInvertersRequest, opts ...grpc.CallOption) (*ListInvertersResponse, error)
	// Subscribe listens to new Inverter(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UpsService_SubscribeClient, error)
	// GetInverter retrieves details of a single Inverter
	GetInverter(ctx context.Context, in *GetInverterRequest, opts ...grpc.CallOption) (*GetInverterResponse, error)
	// Listen listens to Inverter updates and log output of a running Inverter
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (UpsService_ListenClient, error)
	// StopInverter stops a currently running Inverter
	StopInverter(ctx context.Context, in *StopInverterRequest, opts ...grpc.CallOption) (*StopInverterResponse, error)
}

type upsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpsServiceClient(cc grpc.ClientConnInterface) UpsServiceClient {
	return &upsServiceClient{cc}
}

func (c *upsServiceClient) StartLocalInverter(ctx context.Context, opts ...grpc.CallOption) (UpsService_StartLocalInverterClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpsService_ServiceDesc.Streams[0], "/v1.UpsService/StartLocalInverter", opts...)
	if err != nil {
		return nil, err
	}
	x := &upsServiceStartLocalInverterClient{stream}
	return x, nil
}

type UpsService_StartLocalInverterClient interface {
	Send(*StartLocalInverterRequest) error
	CloseAndRecv() (*StartInverterResponse, error)
	grpc.ClientStream
}

type upsServiceStartLocalInverterClient struct {
	grpc.ClientStream
}

func (x *upsServiceStartLocalInverterClient) Send(m *StartLocalInverterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upsServiceStartLocalInverterClient) CloseAndRecv() (*StartInverterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartInverterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upsServiceClient) StartFromPreviousInverter(ctx context.Context, in *StartFromPreviousInverterRequest, opts ...grpc.CallOption) (*StartInverterResponse, error) {
	out := new(StartInverterResponse)
	err := c.cc.Invoke(ctx, "/v1.UpsService/StartFromPreviousInverter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upsServiceClient) StartInverter(ctx context.Context, in *StartInverterRequest, opts ...grpc.CallOption) (*StartInverterResponse, error) {
	out := new(StartInverterResponse)
	err := c.cc.Invoke(ctx, "/v1.UpsService/StartInverter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upsServiceClient) ListInverters(ctx context.Context, in *ListInvertersRequest, opts ...grpc.CallOption) (*ListInvertersResponse, error) {
	out := new(ListInvertersResponse)
	err := c.cc.Invoke(ctx, "/v1.UpsService/ListInverters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UpsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpsService_ServiceDesc.Streams[1], "/v1.UpsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &upsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type upsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *upsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upsServiceClient) GetInverter(ctx context.Context, in *GetInverterRequest, opts ...grpc.CallOption) (*GetInverterResponse, error) {
	out := new(GetInverterResponse)
	err := c.cc.Invoke(ctx, "/v1.UpsService/GetInverter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (UpsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpsService_ServiceDesc.Streams[2], "/v1.UpsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &upsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type upsServiceListenClient struct {
	grpc.ClientStream
}

func (x *upsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upsServiceClient) StopInverter(ctx context.Context, in *StopInverterRequest, opts ...grpc.CallOption) (*StopInverterResponse, error) {
	out := new(StopInverterResponse)
	err := c.cc.Invoke(ctx, "/v1.UpsService/StopInverter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpsServiceServer is the server API for UpsService service.
// All implementations must embed UnimplementedUpsServiceServer
// for forward compatibility
type UpsServiceServer interface {
	// StartLocalInverter starts a Inverter on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ups/config.yaml
	//   3. all bytes constituting the Inverter YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalInverter(UpsService_StartLocalInverterServer) error
	// StartFromPreviousInverter starts a new Inverter based on a previous one.
	// If the previous Inverter does not have the can-replay condition set this call will result in an error.
	StartFromPreviousInverter(context.Context, *StartFromPreviousInverterRequest) (*StartInverterResponse, error)
	// StartInverterRequest starts a new Inverter based on its specification.
	StartInverter(context.Context, *StartInverterRequest) (*StartInverterResponse, error)
	// Searches for Inverter(s) known to this instance
	ListInverters(context.Context, *ListInvertersRequest) (*ListInvertersResponse, error)
	// Subscribe listens to new Inverter(s) updates
	Subscribe(*SubscribeRequest, UpsService_SubscribeServer) error
	// GetInverter retrieves details of a single Inverter
	GetInverter(context.Context, *GetInverterRequest) (*GetInverterResponse, error)
	// Listen listens to Inverter updates and log output of a running Inverter
	Listen(*ListenRequest, UpsService_ListenServer) error
	// StopInverter stops a currently running Inverter
	StopInverter(context.Context, *StopInverterRequest) (*StopInverterResponse, error)
	mustEmbedUnimplementedUpsServiceServer()
}

// UnimplementedUpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpsServiceServer struct {
}

func (UnimplementedUpsServiceServer) StartLocalInverter(UpsService_StartLocalInverterServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalInverter not implemented")
}
func (UnimplementedUpsServiceServer) StartFromPreviousInverter(context.Context, *StartFromPreviousInverterRequest) (*StartInverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousInverter not implemented")
}
func (UnimplementedUpsServiceServer) StartInverter(context.Context, *StartInverterRequest) (*StartInverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInverter not implemented")
}
func (UnimplementedUpsServiceServer) ListInverters(context.Context, *ListInvertersRequest) (*ListInvertersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInverters not implemented")
}
func (UnimplementedUpsServiceServer) Subscribe(*SubscribeRequest, UpsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUpsServiceServer) GetInverter(context.Context, *GetInverterRequest) (*GetInverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInverter not implemented")
}
func (UnimplementedUpsServiceServer) Listen(*ListenRequest, UpsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedUpsServiceServer) StopInverter(context.Context, *StopInverterRequest) (*StopInverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInverter not implemented")
}
func (UnimplementedUpsServiceServer) mustEmbedUnimplementedUpsServiceServer() {}

// UnsafeUpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpsServiceServer will
// result in compilation errors.
type UnsafeUpsServiceServer interface {
	mustEmbedUnimplementedUpsServiceServer()
}

func RegisterUpsServiceServer(s grpc.ServiceRegistrar, srv UpsServiceServer) {
	s.RegisterService(&UpsService_ServiceDesc, srv)
}

func _UpsService_StartLocalInverter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpsServiceServer).StartLocalInverter(&upsServiceStartLocalInverterServer{stream})
}

type UpsService_StartLocalInverterServer interface {
	SendAndClose(*StartInverterResponse) error
	Recv() (*StartLocalInverterRequest, error)
	grpc.ServerStream
}

type upsServiceStartLocalInverterServer struct {
	grpc.ServerStream
}

func (x *upsServiceStartLocalInverterServer) SendAndClose(m *StartInverterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upsServiceStartLocalInverterServer) Recv() (*StartLocalInverterRequest, error) {
	m := new(StartLocalInverterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UpsService_StartFromPreviousInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpsServiceServer).StartFromPreviousInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UpsService/StartFromPreviousInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpsServiceServer).StartFromPreviousInverter(ctx, req.(*StartFromPreviousInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpsService_StartInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpsServiceServer).StartInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UpsService/StartInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpsServiceServer).StartInverter(ctx, req.(*StartInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpsService_ListInverters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvertersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpsServiceServer).ListInverters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UpsService/ListInverters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpsServiceServer).ListInverters(ctx, req.(*ListInvertersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpsServiceServer).Subscribe(m, &upsServiceSubscribeServer{stream})
}

type UpsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type upsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *upsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpsService_GetInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpsServiceServer).GetInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UpsService/GetInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpsServiceServer).GetInverter(ctx, req.(*GetInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpsServiceServer).Listen(m, &upsServiceListenServer{stream})
}

type UpsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type upsServiceListenServer struct {
	grpc.ServerStream
}

func (x *upsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpsService_StopInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpsServiceServer).StopInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UpsService/StopInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpsServiceServer).StopInverter(ctx, req.(*StopInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpsService_ServiceDesc is the grpc.ServiceDesc for UpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UpsService",
	HandlerType: (*UpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousInverter",
			Handler:    _UpsService_StartFromPreviousInverter_Handler,
		},
		{
			MethodName: "StartInverter",
			Handler:    _UpsService_StartInverter_Handler,
		},
		{
			MethodName: "ListInverters",
			Handler:    _UpsService_ListInverters_Handler,
		},
		{
			MethodName: "GetInverter",
			Handler:    _UpsService_GetInverter_Handler,
		},
		{
			MethodName: "StopInverter",
			Handler:    _UpsService_StopInverter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalInverter",
			Handler:       _UpsService_StartLocalInverter_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _UpsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _UpsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ups.proto",
}
